version: '3'
services:
  database:
    image: 'postgres:latest'
    restart: always
    env_file:
      - database.env
    volumes:
      - 'database-data:/var/lib/postgresql/data/'
    networks:
      - database
  frontend:
    image: 'ghcr.io/imgprocessing/frontend:latest'
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend-http.rule=Host(`frontend.docker.localhost`)
      - traefik.http.routers.frontend-http.entrypoints=http
      - traefik.http.routers.frontend-http.middlewares=redirect
      - traefik.http.routers.frontend-https.rule=Host(`frontend.docker.localhost`)
      - traefik.http.routers.frontend-https.entrypoints=https
      - traefik.http.routers.frontend-https.tls=true
      - traefik.http.services.frontend.loadbalancer.server.port=80
      - traefik.http.middlewares.redirect.redirectscheme.scheme=https
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_frontend
    networks:
      - frontend
    depends_on:
      - loadbalancer
  backend:
    image: 'ghcr.io/imgprocessing/backend:latest'
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend-http.rule=Host(`backend.docker.localhost`)
      - traefik.http.routers.backend-http.entrypoints=http
      - traefik.http.routers.backend-http.middlewares=redirect
      - traefik.http.routers.backend-https.rule=Host(`backend.docker.localhost`)
      - traefik.http.routers.backend-https.entrypoints=https
      - traefik.http.routers.backend-https.tls=true
      - traefik.http.services.backend.loadbalancer.server.port=8080
      - traefik.http.middlewares.redirect.redirectscheme.scheme=https
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_backend
    networks:
      - backend
      - storage
    depends_on:
      - database
      - storage01
      - loadbalancer
  adminer.imgprocessing.io:
    image: 'adminer:4-standalone'
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.adminer-http.rule=Host(`adminer.docker.localhost`)
      - traefik.http.routers.adminer-http.entrypoints=http
      - traefik.http.routers.adminer-http.middlewares=redirect
      - traefik.http.routers.adminer-https.rule=Host(`adminer.docker.localhost`)
      - traefik.http.routers.adminer-https.entrypoints=https
      - traefik.http.routers.adminer-https.tls=true
      - traefik.http.services.adminer.loadbalancer.server.port=8080
      - traefik.http.middlewares.redirect.redirectscheme.scheme=https
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_backend
    networks:
      - database
      - backend
    depends_on:
      - database
  loadbalancer:
    image: traefik
    restart: always
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      - '${PWD}/infrastructure/traefik.toml:/etc/traefik/traefik.toml'
      - '${PWD}/infrastructure/ssl.toml:/etc/traefik/ssl.toml'
      - '${PWD}/infrastructure/ssl:/etc/certs'
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
    networks:
      - backend
      - frontend
      - loadbalancer
  storage01:
    image: minio/minio
    restart: always
    volumes:
      - 'imgstore-data:/data1'
    expose:
      - '9000'
    env_file:
      - minio.env
    command: server /data1
    healthcheck:
      test:
        - CMD
        - curl
        - '-f'
        - 'http://localhost:9000/minio/health/live'
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - storage
networks:
  loadbalancer:
    internal: false
  frontend:
    internal: true
  backend:
    internal: true
  database:
    internal: true
  storage:
    internal: true
volumes:
  database-data: null
  imgstore-data: null
